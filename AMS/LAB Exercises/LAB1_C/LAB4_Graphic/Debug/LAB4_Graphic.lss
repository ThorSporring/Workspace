
LAB4_Graphic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000003c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000036c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000145c  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000dd6  00000000  00000000  0000192c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000679  00000000  00000000  00002702  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000184  00000000  00000000  00002d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000696  00000000  00000000  00002f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005a1  00000000  00000000  00003596  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00003b37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	02 d0       	rcall	.+4      	; 0xfa <main>
  f6:	38 c1       	rjmp	.+624    	; 0x368 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <main>:
#include "TFTdriver.h"

int main(void)
{
	// Initialize the display
	DisplayInit();
  fa:	7c d0       	rcall	.+248    	; 0x1f4 <DisplayInit>
	// All pixels white (background)
	while(1){
	FillRectangle(0,0,320,240,31,63,31);
  fc:	0f 2e       	mov	r0, r31
  fe:	ff e1       	ldi	r31, 0x1F	; 31
 100:	cf 2e       	mov	r12, r31
 102:	f0 2d       	mov	r31, r0
 104:	0f 2e       	mov	r0, r31
 106:	ff e3       	ldi	r31, 0x3F	; 63
 108:	ef 2e       	mov	r14, r31
 10a:	f0 2d       	mov	r31, r0
 10c:	0f e1       	ldi	r16, 0x1F	; 31
 10e:	20 ef       	ldi	r18, 0xF0	; 240
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	40 e4       	ldi	r20, 0x40	; 64
 114:	51 e0       	ldi	r21, 0x01	; 1
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	70 e0       	ldi	r23, 0x00	; 0
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	e4 d0       	rcall	.+456    	; 0x2e8 <FillRectangle>
	// Draw red parts of danish flag
	FillRectangle(0,140,100,100,31,0,0);
 120:	c1 2c       	mov	r12, r1
 122:	e1 2c       	mov	r14, r1
 124:	24 e6       	ldi	r18, 0x64	; 100
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	44 e6       	ldi	r20, 0x64	; 100
 12a:	50 e0       	ldi	r21, 0x00	; 0
 12c:	6c e8       	ldi	r22, 0x8C	; 140
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	d9 d0       	rcall	.+434    	; 0x2e8 <FillRectangle>
	FillRectangle(0,0,100,100,31,0,0);
 136:	24 e6       	ldi	r18, 0x64	; 100
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	44 e6       	ldi	r20, 0x64	; 100
 13c:	50 e0       	ldi	r21, 0x00	; 0
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	d0 d0       	rcall	.+416    	; 0x2e8 <FillRectangle>
	FillRectangle(140,0,320-140,100,31,0,0);
 148:	24 e6       	ldi	r18, 0x64	; 100
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	44 eb       	ldi	r20, 0xB4	; 180
 14e:	50 e0       	ldi	r21, 0x00	; 0
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	70 e0       	ldi	r23, 0x00	; 0
 154:	8c e8       	ldi	r24, 0x8C	; 140
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	c7 d0       	rcall	.+398    	; 0x2e8 <FillRectangle>
	FillRectangle(140,140,320-140,100,31,0,0);
 15a:	24 e6       	ldi	r18, 0x64	; 100
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	44 eb       	ldi	r20, 0xB4	; 180
 160:	50 e0       	ldi	r21, 0x00	; 0
 162:	6c e8       	ldi	r22, 0x8C	; 140
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	8c e8       	ldi	r24, 0x8C	; 140
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	be d0       	rcall	.+380    	; 0x2e8 <FillRectangle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	2f ef       	ldi	r18, 0xFF	; 255
 16e:	83 ed       	ldi	r24, 0xD3	; 211
 170:	90 e3       	ldi	r25, 0x30	; 48
 172:	21 50       	subi	r18, 0x01	; 1
 174:	80 40       	sbci	r24, 0x00	; 0
 176:	90 40       	sbci	r25, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <main+0x78>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <main+0x82>
	_delay_ms(1000);
	DisplayInit();
 17c:	00 00       	nop
 17e:	3a d0       	rcall	.+116    	; 0x1f4 <DisplayInit>
 180:	bd cf       	rjmp	.-134    	; 0xfc <main+0x2>

00000182 <WriteCommand>:
	InterfacePixelFormat(0b00000101);
}

void DisplayOff()
{
	WriteCommand(TFT_DISPLAY_OFF);
 182:	88 b9       	out	0x08, r24	; 8
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	8f 77       	andi	r24, 0x7F	; 127
 188:	8b b9       	out	0x0b, r24	; 11
 18a:	84 b3       	in	r24, 0x14	; 20
 18c:	8d 7f       	andi	r24, 0xFD	; 253
 18e:	84 bb       	out	0x14, r24	; 20
 190:	84 b3       	in	r24, 0x14	; 20
 192:	8b 7f       	andi	r24, 0xFB	; 251
 194:	84 bb       	out	0x14, r24	; 20
 196:	00 00       	nop
 198:	84 b3       	in	r24, 0x14	; 20
 19a:	84 60       	ori	r24, 0x04	; 4
 19c:	84 bb       	out	0x14, r24	; 20
 19e:	00 00       	nop
 1a0:	08 95       	ret

000001a2 <WriteData>:
 1a2:	92 b9       	out	0x02, r25	; 2
 1a4:	88 b9       	out	0x08, r24	; 8
 1a6:	8b b1       	in	r24, 0x0b	; 11
 1a8:	80 68       	ori	r24, 0x80	; 128
 1aa:	8b b9       	out	0x0b, r24	; 11
 1ac:	84 b3       	in	r24, 0x14	; 20
 1ae:	8d 7f       	andi	r24, 0xFD	; 253
 1b0:	84 bb       	out	0x14, r24	; 20
 1b2:	84 b3       	in	r24, 0x14	; 20
 1b4:	8b 7f       	andi	r24, 0xFB	; 251
 1b6:	84 bb       	out	0x14, r24	; 20
 1b8:	00 00       	nop
 1ba:	84 b3       	in	r24, 0x14	; 20
 1bc:	84 60       	ori	r24, 0x04	; 4
 1be:	84 bb       	out	0x14, r24	; 20
 1c0:	00 00       	nop
 1c2:	08 95       	ret

000001c4 <DisplayOn>:
}

void DisplayOn()
{
	WriteCommand(TFT_DISPLAY_ON);
 1c4:	89 e2       	ldi	r24, 0x29	; 41
 1c6:	dd cf       	rjmp	.-70     	; 0x182 <WriteCommand>
 1c8:	08 95       	ret

000001ca <SleepOut>:
}

void SleepOut()
{
	WriteCommand(TFT_SLEEP_OUT);
 1ca:	81 e1       	ldi	r24, 0x11	; 17
 1cc:	da cf       	rjmp	.-76     	; 0x182 <WriteCommand>
 1ce:	08 95       	ret

000001d0 <MemoryAccessControl>:
}

void MemoryAccessControl(unsigned char parameter)
{
 1d0:	cf 93       	push	r28
 1d2:	c8 2f       	mov	r28, r24
	WriteCommand(TFT_MEM_ACCESS_CTRL);
 1d4:	86 e3       	ldi	r24, 0x36	; 54
 1d6:	d5 df       	rcall	.-86     	; 0x182 <WriteCommand>
	WriteData(parameter);
 1d8:	8c 2f       	mov	r24, r28
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	e2 df       	rcall	.-60     	; 0x1a2 <WriteData>
}
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <InterfacePixelFormat>:

void InterfacePixelFormat(unsigned char parameter)
{
 1e2:	cf 93       	push	r28
 1e4:	c8 2f       	mov	r28, r24
	WriteCommand(TFT_PIXEL_FORMAT_SET);
 1e6:	8a e3       	ldi	r24, 0x3A	; 58
 1e8:	cc df       	rcall	.-104    	; 0x182 <WriteCommand>
	WriteData(parameter);
 1ea:	8c 2f       	mov	r24, r28
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	d9 df       	rcall	.-78     	; 0x1a2 <WriteData>
}
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <DisplayInit>:

// Initializes (resets) the display
void DisplayInit()
{
	// Control pins are outputs
	DDRG |= 0b00000111;
 1f4:	83 b3       	in	r24, 0x13	; 19
 1f6:	87 60       	ori	r24, 0x07	; 7
 1f8:	83 bb       	out	0x13, r24	; 19
	DDRD |= 0b10000000;
 1fa:	8a b1       	in	r24, 0x0a	; 10
 1fc:	80 68       	ori	r24, 0x80	; 128
 1fe:	8a b9       	out	0x0a, r24	; 10
	// Data pins are outputs
	DDRA = 0xFF;
 200:	8f ef       	ldi	r24, 0xFF	; 255
 202:	81 b9       	out	0x01, r24	; 1
	DDRC = 0xFF;
 204:	87 b9       	out	0x07, r24	; 7
	// All control pins high;
	PORTG |= 0b00000111;
 206:	84 b3       	in	r24, 0x14	; 20
 208:	87 60       	ori	r24, 0x07	; 7
 20a:	84 bb       	out	0x14, r24	; 20
	PORTD |= 0b10000000;
 20c:	8b b1       	in	r24, 0x0b	; 11
 20e:	80 68       	ori	r24, 0x80	; 128
 210:	8b b9       	out	0x0b, r24	; 11
	// RST low
	RST_PORT &= ~(1<<RST_BIT);
 212:	84 b3       	in	r24, 0x14	; 20
 214:	8e 7f       	andi	r24, 0xFE	; 254
 216:	84 bb       	out	0x14, r24	; 20
 218:	2f ef       	ldi	r18, 0xFF	; 255
 21a:	89 e6       	ldi	r24, 0x69	; 105
 21c:	98 e1       	ldi	r25, 0x18	; 24
 21e:	21 50       	subi	r18, 0x01	; 1
 220:	80 40       	sbci	r24, 0x00	; 0
 222:	90 40       	sbci	r25, 0x00	; 0
 224:	e1 f7       	brne	.-8      	; 0x21e <DisplayInit+0x2a>
 226:	00 c0       	rjmp	.+0      	; 0x228 <DisplayInit+0x34>
 228:	00 00       	nop
	// Wait 500 ms
	_delay_ms(500);
	// RST high
	RST_PORT |= (1<<RST_BIT);
 22a:	84 b3       	in	r24, 0x14	; 20
 22c:	81 60       	ori	r24, 0x01	; 1
 22e:	84 bb       	out	0x14, r24	; 20
 230:	2f ef       	ldi	r18, 0xFF	; 255
 232:	88 e5       	ldi	r24, 0x58	; 88
 234:	96 e0       	ldi	r25, 0x06	; 6
 236:	21 50       	subi	r18, 0x01	; 1
 238:	80 40       	sbci	r24, 0x00	; 0
 23a:	90 40       	sbci	r25, 0x00	; 0
 23c:	e1 f7       	brne	.-8      	; 0x236 <DisplayInit+0x42>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <DisplayInit+0x4c>
 240:	00 00       	nop
	_delay_ms(130);
	// Exit sleep mode
	SleepOut();
 242:	c3 df       	rcall	.-122    	; 0x1ca <SleepOut>
	// Display on
	DisplayOn();
 244:	bf df       	rcall	.-130    	; 0x1c4 <DisplayOn>
	// Set bit BGR (scanning direction)
	MemoryAccessControl(0b00001000);
 246:	88 e0       	ldi	r24, 0x08	; 8
 248:	c3 df       	rcall	.-122    	; 0x1d0 <MemoryAccessControl>
	// 16 bits (2 bytes) per pixel
	InterfacePixelFormat(0b00000101);
 24a:	85 e0       	ldi	r24, 0x05	; 5
 24c:	ca cf       	rjmp	.-108    	; 0x1e2 <InterfacePixelFormat>
 24e:	08 95       	ret

00000250 <MemoryWrite>:
 250:	8c e2       	ldi	r24, 0x2C	; 44
	WriteData(parameter);
}

void MemoryWrite()
{
	WriteCommand(TFT_MEM_WRITE);
 252:	97 cf       	rjmp	.-210    	; 0x182 <WriteCommand>
 254:	08 95       	ret

00000256 <WritePixel>:

// Red 0-31, Green 0-63, Blue 0-31
void WritePixel(RGB_t rgb)
{
	//MemoryWrite();
	unsigned int combined_color = (rgb.Red << 11) | (rgb.Green << 5) | rgb.Blue;
 256:	46 2f       	mov	r20, r22
 258:	50 e0       	ldi	r21, 0x00	; 0
 25a:	54 2f       	mov	r21, r20
 25c:	44 27       	eor	r20, r20
 25e:	55 0f       	add	r21, r21
 260:	55 0f       	add	r21, r21
 262:	55 0f       	add	r21, r21
 264:	90 e2       	ldi	r25, 0x20	; 32
 266:	79 9f       	mul	r23, r25
 268:	90 01       	movw	r18, r0
 26a:	11 24       	eor	r1, r1
 26c:	ba 01       	movw	r22, r20
 26e:	62 2b       	or	r22, r18
 270:	73 2b       	or	r23, r19
	WriteData(combined_color);
 272:	9b 01       	movw	r18, r22
 274:	28 2b       	or	r18, r24
 276:	c9 01       	movw	r24, r18
 278:	94 cf       	rjmp	.-216    	; 0x1a2 <WriteData>
 27a:	08 95       	ret

0000027c <SetColumnAddress>:
}

// Set Column Address (0-239), Start > End
void SetColumnAddress(unsigned int Start, unsigned int End)
{
 27c:	0f 93       	push	r16
 27e:	1f 93       	push	r17
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	08 2f       	mov	r16, r24
 286:	d9 2f       	mov	r29, r25
 288:	16 2f       	mov	r17, r22
 28a:	c7 2f       	mov	r28, r23
	WriteCommand(TFT_SET_COLUMNS_ADR);
 28c:	8a e2       	ldi	r24, 0x2A	; 42
 28e:	79 df       	rcall	.-270    	; 0x182 <WriteCommand>

	WriteData(Start>>8);
 290:	8d 2f       	mov	r24, r29
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	86 df       	rcall	.-244    	; 0x1a2 <WriteData>
	WriteData(Start);
 296:	80 2f       	mov	r24, r16
 298:	9d 2f       	mov	r25, r29
 29a:	83 df       	rcall	.-250    	; 0x1a2 <WriteData>
	WriteData(End>>8);
 29c:	8c 2f       	mov	r24, r28
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	80 df       	rcall	.-256    	; 0x1a2 <WriteData>
	WriteData(End);
 2a2:	81 2f       	mov	r24, r17
 2a4:	9c 2f       	mov	r25, r28
 2a6:	7d df       	rcall	.-262    	; 0x1a2 <WriteData>
 2a8:	df 91       	pop	r29
}
 2aa:	cf 91       	pop	r28
 2ac:	1f 91       	pop	r17
 2ae:	0f 91       	pop	r16
 2b0:	08 95       	ret

000002b2 <SetPageAddress>:
 2b2:	0f 93       	push	r16

// Set Page Address (0-319), Start > End
void SetPageAddress(unsigned int Start, unsigned int End)
{
 2b4:	1f 93       	push	r17
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	08 2f       	mov	r16, r24
 2bc:	d9 2f       	mov	r29, r25
 2be:	16 2f       	mov	r17, r22
 2c0:	c7 2f       	mov	r28, r23
	WriteCommand(TFT_SET_PAGE_ADR);
 2c2:	8b e2       	ldi	r24, 0x2B	; 43
 2c4:	5e df       	rcall	.-324    	; 0x182 <WriteCommand>

	WriteData(Start>>8);
 2c6:	8d 2f       	mov	r24, r29
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	6b df       	rcall	.-298    	; 0x1a2 <WriteData>
	WriteData(Start);
 2cc:	80 2f       	mov	r24, r16
 2ce:	9d 2f       	mov	r25, r29
 2d0:	68 df       	rcall	.-304    	; 0x1a2 <WriteData>
	WriteData(End>>8);
 2d2:	8c 2f       	mov	r24, r28
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	65 df       	rcall	.-310    	; 0x1a2 <WriteData>
	WriteData(End);
 2d8:	81 2f       	mov	r24, r17
 2da:	9c 2f       	mov	r25, r28
 2dc:	62 df       	rcall	.-316    	; 0x1a2 <WriteData>
 2de:	df 91       	pop	r29
}
 2e0:	cf 91       	pop	r28
 2e2:	1f 91       	pop	r17
 2e4:	0f 91       	pop	r16
 2e6:	08 95       	ret

000002e8 <FillRectangle>:
 2e8:	4f 92       	push	r4
// Fills rectangle with specified color
// (StartX,StartY) = Upper left corner. X horizontal (0-319) , Y vertical (0-239).
// Height (1-240) is vertical. Width (1-320) is horizontal.
// R-G-B = 5-6-5 bits.
void FillRectangle(unsigned int StartX, unsigned int StartY, unsigned int Width, unsigned int Height, unsigned char Red, unsigned char Green, unsigned char Blue)
{
 2ea:	5f 92       	push	r5
 2ec:	6f 92       	push	r6
 2ee:	7f 92       	push	r7
 2f0:	8f 92       	push	r8
 2f2:	9f 92       	push	r9
 2f4:	af 92       	push	r10
 2f6:	bf 92       	push	r11
 2f8:	cf 92       	push	r12
 2fa:	ef 92       	push	r14
 2fc:	0f 93       	push	r16
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	4c 01       	movw	r8, r24
 304:	3b 01       	movw	r6, r22
 306:	59 01       	movw	r10, r18
	RGB_t rgb = {Red, Green, Blue};
	SetPageAddress(StartX, StartX + Width);
 308:	2c 01       	movw	r4, r24
 30a:	44 0e       	add	r4, r20
 30c:	55 1e       	adc	r5, r21
 30e:	b2 01       	movw	r22, r4
 310:	d0 df       	rcall	.-96     	; 0x2b2 <SetPageAddress>
	SetColumnAddress(StartY, StartY + Height);
 312:	a6 0c       	add	r10, r6
 314:	b7 1c       	adc	r11, r7
 316:	b5 01       	movw	r22, r10
 318:	c3 01       	movw	r24, r6
	MemoryWrite();
 31a:	b0 df       	rcall	.-160    	; 0x27c <SetColumnAddress>
 31c:	99 df       	rcall	.-206    	; 0x250 <MemoryWrite>
	
	for(int i = StartX; i < StartX + Width; i++)
 31e:	13 c0       	rjmp	.+38     	; 0x346 <FillRectangle+0x5e>
	{
		for(int i = StartY; i < StartY + Height; i++)
 320:	e3 01       	movw	r28, r6
 322:	0b c0       	rjmp	.+22     	; 0x33a <FillRectangle+0x52>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 324:	8f e8       	ldi	r24, 0x8F	; 143
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	01 97       	sbiw	r24, 0x01	; 1
 32a:	f1 f7       	brne	.-4      	; 0x328 <FillRectangle+0x40>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <FillRectangle+0x46>
 32e:	00 00       	nop
		{
			_delay_us(100);
			WritePixel(rgb);
 330:	60 2f       	mov	r22, r16
 332:	7e 2d       	mov	r23, r14
 334:	8c 2d       	mov	r24, r12
 336:	8f df       	rcall	.-226    	; 0x256 <WritePixel>
	SetColumnAddress(StartY, StartY + Height);
	MemoryWrite();
	
	for(int i = StartX; i < StartX + Width; i++)
	{
		for(int i = StartY; i < StartY + Height; i++)
 338:	21 96       	adiw	r28, 0x01	; 1
 33a:	ca 15       	cp	r28, r10
 33c:	db 05       	cpc	r29, r11
 33e:	90 f3       	brcs	.-28     	; 0x324 <FillRectangle+0x3c>
	RGB_t rgb = {Red, Green, Blue};
	SetPageAddress(StartX, StartX + Width);
	SetColumnAddress(StartY, StartY + Height);
	MemoryWrite();
	
	for(int i = StartX; i < StartX + Width; i++)
 340:	9f ef       	ldi	r25, 0xFF	; 255
 342:	89 1a       	sub	r8, r25
 344:	99 0a       	sbc	r9, r25
 346:	84 14       	cp	r8, r4
 348:	95 04       	cpc	r9, r5
 34a:	50 f3       	brcs	.-44     	; 0x320 <FillRectangle+0x38>
			_delay_us(100);
			WritePixel(rgb);
		}
	}
	
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	0f 91       	pop	r16
 352:	ef 90       	pop	r14
 354:	cf 90       	pop	r12
 356:	bf 90       	pop	r11
 358:	af 90       	pop	r10
 35a:	9f 90       	pop	r9
 35c:	8f 90       	pop	r8
 35e:	7f 90       	pop	r7
 360:	6f 90       	pop	r6
 362:	5f 90       	pop	r5
 364:	4f 90       	pop	r4
 366:	08 95       	ret

00000368 <_exit>:
 368:	f8 94       	cli

0000036a <__stop_program>:
 36a:	ff cf       	rjmp	.-2      	; 0x36a <__stop_program>
